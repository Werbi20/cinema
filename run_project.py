#!/usr/bin/env python3
"""
Script para executar o projeto Cinema ERP completo
"""

import os
import sys
import subprocess
import time
import webbrowser
from pathlib import Path

def run_command(command, cwd=None, shell=True):
    """Executa um comando e retorna o resultado"""
    try:
        result = subprocess.run(command, cwd=cwd, shell=shell, check=True, capture_output=True, text=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar comando: {e}")
        print(f"Stderr: {e.stderr}")
        return None

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    print("üîç Verificando depend√™ncias...")
    
    # Verificar Python
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        return False
    
    # Verificar Node.js
    node_result = run_command("node --version")
    if not node_result:
        print("‚ùå Node.js n√£o encontrado")
        return False
    
    # Verificar npm
    npm_result = run_command("npm --version")
    if not npm_result:
        print("‚ùå npm n√£o encontrado")
        return False
    
    print("‚úÖ Depend√™ncias verificadas com sucesso")
    return True

def setup_backend():
    """Configura e executa o backend"""
    print("\nüöÄ Configurando backend...")
    
    backend_dir = Path("backend")
    if not backend_dir.exists():
        print("‚ùå Diret√≥rio backend n√£o encontrado")
        return False
    
    # Verificar se virtual environment existe
    venv_path = backend_dir / "venv"
    if not venv_path.exists():
        print("üì¶ Criando virtual environment...")
        run_command("python -m venv venv", cwd=backend_dir)
    
    # Ativar virtual environment e instalar depend√™ncias
    if os.name == 'nt':  # Windows
        activate_cmd = "venv\\Scripts\\activate && pip install -r requirements.txt"
    else:  # Linux/Mac
        activate_cmd = "source venv/bin/activate && pip install -r requirements.txt"
    
    print("üì¶ Instalando depend√™ncias do backend...")
    run_command(activate_cmd, cwd=backend_dir)
    
    # Verificar se arquivo .env existe
    env_file = backend_dir / ".env"
    if not env_file.exists():
        print("‚öôÔ∏è Criando arquivo .env...")
        env_example = backend_dir / "env.example"
        if env_example.exists():
            run_command(f"copy env.example .env" if os.name == 'nt' else "cp env.example .env", cwd=backend_dir)
        else:
            print("‚ö†Ô∏è Arquivo env.example n√£o encontrado. Configure manualmente as vari√°veis de ambiente.")
    
    print("‚úÖ Backend configurado com sucesso")
    return True

def setup_frontend():
    """Configura e executa o frontend"""
    print("\nüé® Configurando frontend...")
    
    frontend_dir = Path("frontend")
    if not frontend_dir.exists():
        print("‚ùå Diret√≥rio frontend n√£o encontrado")
        return False
    
    # Instalar depend√™ncias
    print("üì¶ Instalando depend√™ncias do frontend...")
    run_command("npm install", cwd=frontend_dir)
    
    print("‚úÖ Frontend configurado com sucesso")
    return True

def start_backend():
    """Inicia o backend em background"""
    print("\nüöÄ Iniciando backend...")
    
    backend_dir = Path("backend")
    
    # Comando para ativar venv e executar
    if os.name == 'nt':  # Windows
        cmd = "venv\\Scripts\\activate && python run_app.py"
    else:  # Linux/Mac
        cmd = "source venv/bin/activate && python run_app.py"
    
    # Executar em background
    if os.name == 'nt':
        subprocess.Popen(cmd, cwd=backend_dir, shell=True, creationflags=subprocess.CREATE_NEW_CONSOLE)
    else:
        subprocess.Popen(cmd, cwd=backend_dir, shell=True)
    
    print("‚úÖ Backend iniciado em background")
    return True

def start_frontend():
    """Inicia o frontend em background"""
    print("\nüé® Iniciando frontend...")
    
    frontend_dir = Path("frontend")
    
    # Executar em background
    if os.name == 'nt':
        subprocess.Popen("npm run dev", cwd=frontend_dir, shell=True, creationflags=subprocess.CREATE_NEW_CONSOLE)
    else:
        subprocess.Popen("npm run dev", cwd=frontend_dir, shell=True)
    
    print("‚úÖ Frontend iniciado em background")
    return True

def wait_for_services():
    """Aguarda os servi√ßos ficarem dispon√≠veis"""
    print("\n‚è≥ Aguardando servi√ßos ficarem dispon√≠veis...")
    
    import requests
    
    # Aguardar backend
    backend_ready = False
    for i in range(30):  # 30 tentativas
        try:
            response = requests.get("http://localhost:8000/health", timeout=2)
            if response.status_code == 200:
                backend_ready = True
                print("‚úÖ Backend est√° rodando")
                break
        except:
            pass
        time.sleep(2)
    
    if not backend_ready:
        print("‚ö†Ô∏è Backend n√£o respondeu em tempo h√°bil")
    
    # Aguardar frontend
    frontend_ready = False
    for i in range(30):  # 30 tentativas
        try:
            response = requests.get("http://localhost:5173", timeout=2)
            if response.status_code == 200:
                frontend_ready = True
                print("‚úÖ Frontend est√° rodando")
                break
        except:
            pass
        time.sleep(2)
    
    if not frontend_ready:
        print("‚ö†Ô∏è Frontend n√£o respondeu em tempo h√°bil")
    
    return backend_ready and frontend_ready

def open_browser():
    """Abre o navegador com as aplica√ß√µes"""
    print("\nüåê Abrindo navegador...")
    
    # Aguardar um pouco para os servi√ßos inicializarem
    time.sleep(5)
    
    try:
        # Abrir frontend
        webbrowser.open("http://localhost:5173")
        print("‚úÖ Frontend aberto no navegador")
        
        # Abrir documenta√ß√£o da API
        webbrowser.open("http://localhost:8000/docs")
        print("‚úÖ Documenta√ß√£o da API aberta no navegador")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao abrir navegador: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üé¨ Cinema ERP - Sistema de Gest√£o de Loca√ß√µes")
    print("=" * 50)
    
    # Verificar depend√™ncias
    if not check_dependencies():
        print("‚ùå Depend√™ncias n√£o atendidas. Instale Python 3.8+ e Node.js 16+")
        return
    
    # Configurar backend
    if not setup_backend():
        print("‚ùå Falha ao configurar backend")
        return
    
    # Configurar frontend
    if not setup_frontend():
        print("‚ùå Falha ao configurar frontend")
        return
    
    # Iniciar servi√ßos
    if not start_backend():
        print("‚ùå Falha ao iniciar backend")
        return
    
    if not start_frontend():
        print("‚ùå Falha ao iniciar frontend")
        return
    
    # Aguardar servi√ßos
    if wait_for_services():
        print("\nüéâ Projeto iniciado com sucesso!")
        print("\nüì± Frontend: http://localhost:5173")
        print("üîß Backend: http://localhost:8000")
        print("üìö API Docs: http://localhost:8000/docs")
        
        # Abrir navegador
        open_browser()
        
        print("\nüí° Para parar os servi√ßos, feche as janelas dos terminais")
        print("üîÑ Para reiniciar, execute este script novamente")
        
    else:
        print("\n‚ö†Ô∏è Alguns servi√ßos podem n√£o estar funcionando corretamente")
        print("Verifique os logs nos terminais abertos")

if __name__ == "__main__":
    main()
